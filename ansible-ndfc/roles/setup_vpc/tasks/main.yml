---
# tasks file for roles/setup_vpc

- ansible.builtin.debug:
    msg:
      - "----------------------------------------------------------------"
      - "+             Calling Role - [setup_vpc]                       +"
      - "----------------------------------------------------------------"
  tags: vpc_all

- name: Query Fabric {{ fabric_settings.FABRIC_NAME }} Leaf1 and Leaf2 for vPC Configuration
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ fabric_settings.FABRIC_NAME }}"
    state: query
    config: >-
        {%- set seed_ip_list = [] -%}
        {%- for switch in fabric_inventory | default([]) -%}
        {%- if switch.role == 'leaf' -%}
        {%- set _ = seed_ip_list.append(dict(seed_ip=switch.seed_ip)) -%}
        {%- endif -%}
        {%- endfor -%}
        {{ seed_ip_list }}
  register: query_result
  tags: vpc_all
  # The above inline Jinja2 template creates the list expected for the config element:
  # - seed_ip: leaf1_seed_ip
  # - seed_ip: leaf2_seed_ip

# Use flag variable 'setup_vpc' to track if you need to setup vpc.
# If it's already setup you can skip it
- name: Set Setup vPC Flag to Default True
  ansible.builtin.set_fact:
    setup_vpc: True
  tags: vpc_all

- name: Set Setup vPC Flag to False If vPC Pair Is Already Configured
  ansible.builtin.set_fact:
    setup_vpc: False
  when: item.isVpcConfigured == true
  loop: "{{ query_result.response }}"
  loop_control:
    label: "{{ item.isVpcConfigured }}"
  tags: vpc_all

- ansible.builtin.debug: msg="Setup vPC flag is - {{ setup_vpc }}"
  tags: vpc_all

- name: Include Tasks To Create vPC Peers Between Leaf1 and Leaf2
  ansible.builtin.import_tasks: setup_vpc_peer.yml
  when: setup_vpc
  tags: vpc_all
