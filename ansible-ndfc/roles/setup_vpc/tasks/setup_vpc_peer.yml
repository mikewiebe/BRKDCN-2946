---

- name: Enable Peer Link Interfaces as Trunks
  cisco.dcnm.dcnm_interface:
    fabric: "{{ fabric_settings.FABRIC_NAME }}"
    config:
      - name: eth1/8
        type: eth
        admin_state: true
        switch:
          - "{{ item.seed_ip }}"
        profile:
          mode: trunk
      - name: eth1/9
        type: eth
        admin_state: true
        switch:
          - "{{ item.seed_ip }}"
        profile:
          mode: trunk
    state: merged
  ignore_errors: true
  loop: "{{ fabric_inventory }}"
  when: item.role == 'leaf'

- name: Create vPC Peers Between Leaf1 and Leaf2
  cisco.dcnm.dcnm_vpc_pair:
    src_fabric: "{{ fabric_settings.FABRIC_NAME }}"
    deploy: false
    state: merged
    config: >-
      {%- set vpc_leafs = fabric_inventory | selectattr('role', 'eq', 'leaf') -%}
      {%- set vpc_peers = [dict(peerOneId=vpc_leafs[0].seed_ip, peerTwoId=vpc_leafs[1].seed_ip)] -%}
      {{ vpc_peers }}
    # The above inline Jinja2 template creates the list expected for the config element:
    # - peerOneId: leaf1_seed_ip
    #   peerTwoId: leaf2_seed_ip
